ext {
    ci = System.getenv("CI") == "true"
}

apply plugin: 'io.github.rockerhieu.versionberg'

apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
kapt {
    correctErrorTypes = true
}
apply plugin: 'kotlin-android-extensions'

apply plugin: 'com.getkeepsafe.dexcount'

apply plugin: 'jacoco-android'

versionberg {
    major 0
    minor 1
    patch 0

    nameTemplate '${major}.${minor}.${patch}-${commitSha}'
    codeTemplate '(((${major} * 100) + ${minor}) * 100) * 100000 + ${build}'
}

android {
    compileSdkVersion androidBuildConfig.compileSdk

    defaultConfig {
        applicationId "xyz.santeri.citybike"

        minSdkVersion androidBuildConfig.minSdk
        targetSdkVersion androidBuildConfig.targetSdk

        resConfigs "en"

        versionCode versionberg.code
        versionName versionberg.name
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            testCoverageEnabled true
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    dexOptions {
        // Don't pre-dex on CI
        preDexLibraries !ci
    }

    // Exclude all files that may cause a conflict when building
    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
    }
}

dependencies {
    implementation project(':data')
    implementation project(':remote')

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${versions.kotlin}"

    implementation "androidx.appcompat:appcompat:${versions.androidx.appcompat}"
    implementation "androidx.constraintlayout:constraintlayout:${versions.androidx.constraint_layout}"
    implementation "com.google.android.material:material:${versions.androidx.design}"
    implementation "androidx.core:core-ktx:${versions.androidx.core_ktx}"

    implementation "androidx.lifecycle:lifecycle-extensions:${versions.androidx.lifecycle}"
    implementation "androidx.lifecycle:lifecycle-reactivestreams-ktx:${versions.androidx.lifecycle}"
    kapt "androidx.lifecycle:lifecycle-compiler:${versions.androidx.lifecycle}"

    implementation "com.google.dagger:dagger-android:${versions.dagger}"
    implementation "com.google.dagger:dagger-android-support:${versions.dagger}"
    kapt "com.google.dagger:dagger-compiler:${versions.dagger}"
    kapt "com.google.dagger:dagger-android-processor:${versions.dagger}"

    implementation "javax.inject:javax.inject:1"

    implementation "io.reactivex.rxjava2:rxjava:${versions.rx}"
    implementation "io.reactivex.rxjava2:rxkotlin:${versions.rxkotlin}"
    implementation "io.reactivex.rxjava2:rxandroid:2.1.0"

    implementation "com.jakewharton.threetenabp:threetenabp:${versions.threetenabp}"

    implementation "org.jsoup:jsoup:${versions.jsoup}"

    implementation "com.google.android.exoplayer:exoplayer:${versions.exoplayer}"

    implementation 'com.github.ajalt:timberkt:1.5.1'

    testImplementation 'junit:junit:4.12'
    testImplementation "org.jetbrains.kotlin:kotlin-test:${versions.kotlin}"
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:${versions.kotlin}"

    androidTestImplementation "androidx.arch.core:core-testing:${versions.androidx.lifecycle}"
    androidTestImplementation "androidx.room:room-testing:${versions.androidx.room}"
    androidTestImplementation "androidx.test:runner:${versions.androidx.test_runner}"
    androidTestImplementation "androidx.test:rules:${versions.androidx.test_rules}"
    androidTestImplementation "androidx.test.espresso:espresso-core:${versions.espresso}"
}