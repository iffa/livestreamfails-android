ext {
    ci = System.getenv("CI") == "true"
}

apply plugin: 'io.github.rockerhieu.versionberg'

apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
kapt {
    correctErrorTypes = true
}
apply plugin: 'kotlin-android-extensions'

apply plugin: 'com.getkeepsafe.dexcount'

versionberg {
    major 0
    minor 1
    patch 0

    nameTemplate '${major}.${minor}.${patch}-${commitSha}'
    codeTemplate '(((${major} * 100) + ${minor}) * 100) * 100000 + ${build}'
}

android {
    compileSdkVersion androidBuildConfig.compileSdk

    defaultConfig {
        applicationId "digital.sogood.livestreamfails"

        minSdkVersion androidBuildConfig.minSdk
        targetSdkVersion androidBuildConfig.targetSdk

        versionCode 1
        versionName "1.0"

        multiDexEnabled true

        testInstrumentationRunner "digital.sogood.livestreamfails.mobile.test.TestRunner"
    }

    buildTypes {
        release {
            minifyEnabled false // TODO: ProGuard rules for release builds
            shrinkResources false

            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            testCoverageEnabled true
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    dexOptions {
        // Don't pre-dex on CI
        preDexLibraries !ci
    }

    // Exclude all files that may cause a conflict when building
    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
    }

    applicationVariants.all { variant ->
        if (variant.buildType.name == "release") {
            variant.outputs.each { output ->
                output.versionCodeOverride = versionberg.code
                output.versionNameOverride = versionberg.name
            }
        }
    }
}

dependencies {
    implementation project(':domain')
    implementation project(':presentation')
    implementation project(':data')
    implementation project(':remote')

    implementation mobileUiDependencies.kotlin

    implementation mobileUiDependencies.appCompat
    implementation mobileUiDependencies.constraintLayout
    implementation mobileUiDependencies.design
    implementation mobileUiDependencies.androidKtx

    implementation mobileUiDependencies.rxKotlin
    implementation mobileUiDependencies.rxAndroid

    implementation mobileUiDependencies.dagger
    implementation mobileUiDependencies.daggerSupport
    kapt mobileUiDependencies.daggerCompiler
    kapt mobileUiDependencies.daggerProcessor

    implementation mobileUiDependencies.javaxAnnotation
    implementation mobileUiDependencies.javaxInject

    implementation mobileUiDependencies.okHttp
    implementation mobileUiDependencies.okHttpLogger

    implementation mobileUiDependencies.thirtyInch
    implementation mobileUiDependencies.thirtyInchRx
    implementation mobileUiDependencies.thirtyInchKt

    implementation mobileUiDependencies.timberKt

    implementation mobileUiDependencies.glide

    implementation mobileUiDependencies.exoPlayer

    // Test dependencies
    testImplementation mobileUiTestDependencies.kotlinJUnit

    androidTestImplementation mobileUiTestDependencies.junit
    androidTestImplementation mobileUiTestDependencies.kotlinJUnit
    androidTestImplementation mobileUiTestDependencies.mockito
    androidTestImplementation mobileUiTestDependencies.mockitoAndroid

    androidTestImplementation mobileUiTestDependencies.espressoCore
    androidTestImplementation mobileUiTestDependencies.espressoIntents
    androidTestImplementation mobileUiTestDependencies.espressoContrib

    androidTestImplementation mobileUiTestDependencies.supportRunner
    androidTestImplementation mobileUiTestDependencies.supportRules

    kaptTest mobileUiDependencies.daggerCompiler
    kaptAndroidTest mobileUiDependencies.daggerCompiler
}